{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["QUERY_USERS","gql","QUERY_BLOCKS","Detail","articleId","useParams","useQuery","variables","data","loading","error","class","data-animated","Date","article","time","toDateString","toLocaleTimeString","title","href","src","img","alt","blocks","map","block","status","style","marginLeft","content","align","Block","tag","UserInfo","console","log","Fragment","articles","id","to","intro","client","ApolloClient","link","createHttpLink","uri","headers","fetchOptions","method","cache","InMemoryCache","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.67597150.chunk.js","sourcesContent":["import React from 'react';\nimport { gql } from 'apollo-boost';\nimport { Query ,ApolloProvider,useQuery,useLazyQuery} from \"react-apollo\";\nimport {ApolloClient, InMemoryCache}from \"apollo-boost\";\nimport { createHttpLink } from \"apollo-link-http\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect,\n  useRouteMatch,\n  useParams,\n  HashRouter,\n  NavLink,\n  useLocation,\n} from \"react-router-dom\";\n\nconst QUERY_USERS = gql`\n {\n    articles {\n      id,\n      time,\n      title,\n      intro,\n      img,\n      blocks{\n        content\n      }\n\n    }\n  \n}`;\nconst QUERY_BLOCKS=gql`\nquery ($articleId:Int!){\n    \n      article(id:$articleId) {\n       time,\n       title,\n       img,\n        blocks{\n          tag\n          content\n        }\n  \n      }\n  \n    }\n\n`;\nexport function Block( block, status ) {\n  switch (status) {\n    case 'li':\n      return  <li style={{marginLeft:30}}>{block.content}</li>;\n    case 'h3':\n      return  <h3 >{block.content}</h3>;\n    case 'p':\n      return  <p  class=\"margbot50\">{block.content}</p>;\n    case 'img':\n      return  <div class=\"single_blog_post_img\"><img src={block.content} alt=\"\" /></div>;\n    case 'project':\n      return <h4  align=\"center\" class=\"margbot50\">deployed on Github Pages: <a href={\"\"+block.content}><i class=\"fas fa-door-open fa-1x\"></i></a></h4>;\n    default:\n      return <h1>Error</h1>;\n  }\n \n \n}\nexport  function Detail(){\n  let { articleId } = useParams();\n  const {  data ,loading,error} = useQuery(QUERY_BLOCKS, {\n    variables: { articleId }\n  });\n  if (loading) return null;\n  if (error) return `Error! ${error}`;\n  return (\n\n   \n    <div class=\"single_blog_post clearfix\" data-animated=\"fadeInUp\">\n      <div class=\"single_blog_post_descr\">\n       \n        <div class=\"single_blog_post_date\">{(new Date(data.article.time)).toDateString()+' | '+(new Date(data.article.time)).toLocaleTimeString()}</div>\n        <div class=\"single_blog_post_title\">{data.article.title}</div>\n        <ul class=\"single_blog_post_info\">\n          <li><a href=\"javascript:void(0);\" >Admin</a></li>\n          <li><a href=\"javascript:void(0);\" >Creative</a></li>\n          <li><a href=\"javascript:void(0);\" >0 Comments</a></li>\n        </ul>\n      </div>\n\n      <div class=\"single_blog_post_img\"><img src={data.article.img} alt=\"\" /></div>\n\n      <div class=\"single_blog_post_content\">\n  \n\n        {\n          data.article.blocks.map(block =>(\n            Block(block,block.tag)\n            \n          ))\n        }  \n\n    \n      </div>\n\n</div>\n\n\n \n  );\n\n}\n\n\n\n\n\nexport function UserInfo() {\n  \n  // Polling: rovides near-real-time synchronization with your server\n  // by causing a query to execute periodically at a specified interval\n /* const query=QUERY_USERS\n  const varibles={}\n  const p = new Promise( (resolve) => {\n    client.query({\n      query,\n      varibles,\n      \n    }).then((res) => {\n      resolve(res.data)\n    })\n  })*/\n\n\n  const { data, loading } = useQuery(QUERY_USERS);\n  console.log(data)\n  // should handle loading status\n  if (loading) return <p>Loading...</p>;\n  return  (\n <React.Fragment>\n{data.articles.map(   article  => (\n\n\n\n<div class=\"blog_post margbot50 clearfix\" data-animated=\"fadeInUp\">\n<div id=\"blog1\" class=\"blog_post_img\">\n  <img id=\"img2\" src={article.img} alt=\"\" />\n  <NavLink class=\"zoom\" to={'/detail/'+article.id}></NavLink>\n</div>\n<div class=\"blog_post_descr\">\n<div class=\"blog_post_date\">{(new Date(article.time)).toDateString()+' | '+(new Date(article.time)).toLocaleTimeString()}</div>\n<NavLink class=\"blog_post_title\"  to={'/detail/'+article.id}>{article.title}</NavLink>\n\n      <ul class=\"blog_post_info\">\n        <li><a href=\"javascript:void(0);\" >Admin</a></li>\n        <li><a href=\"javascript:void(0);\" >Creative</a></li>\n        <li><a href=\"javascript:void(0);\" >0 Comments</a></li>\n      </ul>\n      <hr/>\n      <div class=\"blog_post_content\">{article.intro+\" ... \"}</div>\n      <NavLink class=\"read_more_btn\" to={'/detail/'+article.id}>Read More</NavLink>\n</div>\n</div>\n))}\n<ul id=\"sahidu\" class=\"pagination clearfix\">\n            <li class=\"active\"><a href=\"javascript:void(0);\" >1</a></li>\n            </ul>\n    </React.Fragment>\n  );\n}\n/*\nconst client = new ApolloClient({\n    uri: 'http://54.197.2.14/graphql/',\n});*/\n\n\nconst client = new ApolloClient({\n  link: createHttpLink({\n        uri: 'https://54.197.2.14:80/graphql/', \n        headers: {'Content-Type': 'application/graphql'},\n        fetchOptions:{method:\"GET\"},\n        }),\n  cache:new InMemoryCache(),\n})\n\n\n\n const App = () =>\n    (<ApolloProvider client={client}>\n  <HashRouter>\n  <Switch>\n   <Route path='/detail/:articleId' component={Detail}/>\n   <Route path='/list' component={UserInfo}/>\n    <Redirect to='/list'/>\n   </Switch>\n  </HashRouter>\n\n\n</ApolloProvider>);\n \n \n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('blogList'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}